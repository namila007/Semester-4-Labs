$date
	Mon Aug 28 17:19:10 2017
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module stimulus $end
$var wire 8 ! OUT1 [7:0] $end
$var wire 8 " OUT2 [7:0] $end
$var wire 8 # OUT3 [7:0] $end
$var wire 8 $ OUT4 [7:0] $end
$var wire 8 % newIN [7:0] $end
$var reg 8 & IN [7:0] $end
$var reg 3 ' INaddr [2:0] $end
$var reg 3 ( OUT1addr [2:0] $end
$var reg 3 ) OUT2addr [2:0] $end
$var reg 3 * Select [2:0] $end
$var reg 1 + clk $end
$scope module r1 $end
$var wire 8 , IN [7:0] $end
$var wire 3 - INaddr [2:0] $end
$var wire 8 . OUT1 [7:0] $end
$var wire 3 / OUT1addr [2:0] $end
$var wire 8 0 OUT2 [7:0] $end
$var wire 3 1 OUT2addr [2:0] $end
$var wire 1 2 clk $end
$var reg 9 3 reg0 [8:0] $end
$var reg 9 4 reg1 [8:0] $end
$var reg 9 5 reg2 [8:0] $end
$var reg 9 6 reg3 [8:0] $end
$var reg 9 7 reg4 [8:0] $end
$var reg 9 8 reg5 [8:0] $end
$var reg 9 9 reg6 [8:0] $end
$var reg 9 : reg7 [8:0] $end
$upscope $end
$scope module a1 $end
$var wire 8 ; DATA1 [7:0] $end
$var wire 8 < DATA2 [7:0] $end
$var wire 3 = Select [2:0] $end
$var reg 8 > out [7:0] $end
$upscope $end
$scope module r2 $end
$var wire 8 ? IN [7:0] $end
$var wire 3 @ INaddr [2:0] $end
$var wire 8 A OUT1 [7:0] $end
$var wire 3 B OUT1addr [2:0] $end
$var wire 8 C OUT2 [7:0] $end
$var wire 3 D OUT2addr [2:0] $end
$var wire 1 2 clk $end
$var reg 9 E reg0 [8:0] $end
$var reg 9 F reg1 [8:0] $end
$var reg 9 G reg2 [8:0] $end
$var reg 9 H reg3 [8:0] $end
$var reg 9 I reg4 [8:0] $end
$var reg 9 J reg5 [8:0] $end
$var reg 9 K reg6 [8:0] $end
$var reg 9 L reg7 [8:0] $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx L
bx K
bx J
bx I
bx H
bx G
bx F
bx E
bx D
bx C
bx B
bx A
bx @
bx ?
bx >
bx =
bx <
bx ;
bx :
bx 9
bx 8
bx 7
bx 6
bx 5
bx 4
bx 3
x2
bx 1
bx 0
bx /
bx .
bx -
bx ,
x+
bx *
bx )
bx (
bx '
bx &
bx %
bx $
bx #
bx "
bx !
$end
#3
b10 &
b10 ,
b1 '
b1 -
b1 @
1+
12
#6
b10 4
b0xxxxxxxx F
0+
02
#9
b100 &
b100 ,
b10 '
b10 -
b10 @
1+
12
#12
b0xxxxxxxx G
b100 5
0+
02
#15
b100 "
b100 0
b100 <
b10 !
b10 .
b10 ;
b10 )
b10 1
b10 D
b1 (
b1 /
b1 B
#20
b110 >
b110 %
b110 ?
b1 *
b1 =
#22
b11 '
b11 -
b11 @
#24
bx "
bx 0
bx <
bx $
bx C
bx >
bx %
bx ?
bx !
bx .
bx ;
bx #
bx A
b100 )
b100 1
b100 D
b11 (
b11 /
b11 B
